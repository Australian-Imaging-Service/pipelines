title: "Functional MRI data preprocessing pipeline"
schema_version: 1.0
version: &package_version "23.1.4"
base_image:
  name: nipreps/fmriprep
  tag: *package_version
  package_manager: apt
packages:
  pip:
    - pydra-tasks-dcm2niix
    - pydra-tasks-mrtrix3
  neurodocker:
    dcm2niix: v1.0.20201102
    mrtrix3: "3.0.2"
licenses:
  freesurfer:
    destination: /opt/freesurfer/license.txt
    info_url: https://surfer.nmr.mgh.harvard.edu/registration.html
    description: >
      `fMRIPRep` uses FreeSurfer tools, which require a license to run.
authors:
  - name: Thomas G. Close
    email: thomas.close@sydney.edu.au
docs:
  info_url: https://fmriprep.org
  description: |
    `fMRIPrep` is a functional magnetic resonance imaging (fMRI) data preprocessing
    pipeline that is designed to provide an easily accessible, state-of-the-art
    interface that is robust to variations in scan acquisition protocols and that
    requires minimal user input, while providing easily interpretable and comprehensive
    error and output reporting. It performs basic processing steps (coregistration,
    normalization, unwarping, noise component extraction, segmentation,
    skullstripping etc.) providing outputs that can be easily submitted to a variety
    of group level analyses, including task-based or resting-state fMRI, graph
    theory measures, surface or volume-based statistics, etc.

    Optional flags that can be provided to the `fmriprep_flags` parameter:
    ```
      [--anat-only] [--boilerplate_only] [--md-only-boilerplate]
      [--error-on-aroma-warnings] [-v]
      [--ignore {fieldmaps,slicetiming,sbref,t2w,flair} [{fieldmaps,slicetiming,sbref,t2w,flair} ...]]
      [--output-spaces [OUTPUT_SPACES [OUTPUT_SPACES ...]]]
      [--me-output-echos] [--bold2t1w-init {register,header}]
      [--bold2t1w-dof {6,9,12}] [--force-bbr] [--force-no-bbr]
      [--medial-surface-nan] [--slice-time-ref SLICE_TIME_REF]
      [--random-seed _RANDOM_SEED]
      [--use-aroma]
      [--aroma-melodic-dimensionality AROMA_MELODIC_DIM]
      [--return-all-components]
      [--fd-spike-threshold REGRESSORS_FD_TH]
      [--dvars-spike-threshold REGRESSORS_DVARS_TH]
      [--skull-strip-template SKULL_STRIP_TEMPLATE]
      [--skull-strip-fixed-seed]
      [--skull-strip-t1w {auto,skip,force}] [--fmap-bspline]
      [--fmap-no-demean] [--topup-max-vols TOPUP_MAX_VOLS]
      [--use-syn-sdc [{warn,error}]] [--force-syn]
      [--no-submm-recon] [--cifti-output [{91k,170k}] | --fs-no-reconall]
      [--resource-monitor]
      [--reports-only] [--config-file FILE] [--write-graph]
      [--stop-on-first-crash] [--notrack]
      [--debug {compcor,fieldmaps,all} [{compcor,fieldmaps,all} ...]]
      [--sloppy]
    ```
  known_issues:
    - description: See App issues page
      url: https://github.com/nipreps/fmriprep/issues
commands:
  fmriprep:
    task: frametree.bids:bids_app
    row_frequency: common:Clinical[session]
    inputs:
      T1w:
        datatype: medimage/nifti-gz-x
        help: "T1-weighted anatomical scan"
        configuration:
          path: anat/T1w
        column_defaults:
          datatype: medimage/dicom-series
      T2w:
        datatype: medimage/nifti-gz-x
        help: "T2-weighted anatomical scan"
        configuration:
          path: anat/T2w
        column_defaults:
          datatype: medimage/dicom-series
      bold:
        datatype: medimage/nifti-gz-x
        help: "functional MRI"
        configuration:
          path: func/task-rest_bold
        column_defaults:
          datatype: medimage/dicom-series
      fmap_magnitude1:
        datatype: medimage/nifti-gz-x
        help: "Field map - BIDS Case 1 & 2: magnitude of first echo"
        configuration:
          path: fmap/magnitude1
        column_defaults:
          datatype: medimage/dicom-series
      fmap_magnitude2:
        datatype: medimage/nifti-gz-x
        help: "Field map - BIDS Case 1 & 2: magnitude of second echo"
        configuration:
          path: fmap/magnitude2
        column_defaults:
          datatype: medimage/dicom-series
      fmap_magnitude:
        datatype: medimage/nifti-gz-x
        help: "Field map - BIDS Case 3: magnitude image used for anatomical reference"
        configuration:
          path: fmap/magnitude
        column_defaults:
          datatype: medimage/dicom-series
      fmap_phasediff:
        datatype: medimage/nifti-gz-x
        help: "Field map - BIDS Case 1: phasediff image corresponding to the phase-diff map between echo times"
        configuration:
          path: fmap/phasediff
        column_defaults:
          datatype: medimage/dicom-series
      fmap_phase1:
        datatype: medimage/nifti-gz-x
        help: "Field map - BIDS Case 2: phase of first echo"
        configuration:
          path: fmap/phase1
        column_defaults:
          datatype: medimage/dicom-series
      fmap_phase2:
        datatype: medimage/nifti-gz-x
        help: "Field map - BIDS Case 2: phase of second echo"
        configuration:
          path: fmap/phase2
        column_defaults:
          datatype: medimage/dicom-series
      fmap_fieldmap:
        datatype: medimage/nifti-gz-x
        help: "Field map - BIDS Case 3: directly reconstructed field map"
        configuration:
          path: fmap/fieldmap
        column_defaults:
          datatype: medimage/dicom-series
      fmap_epi:
        datatype: medimage/nifti-gz-x
        configuration:
          path: fmap/epi
        column_defaults:
          datatype: medimage/dicom-series
        help: >-
          Field map - BIDS Case 4: Spin Echo EPI scans with different phase encoding
          directions to estimate the distortion map corresponding to the nonuniformities
          of the B0 field
    outputs:
      fmriprep:
        datatype: generic/directory
        help: Preprocessed fMRI data
        configuration:
    parameters:
      fmriprep_flags:
        field: flags
        datatype: field/text
        help: Command line flags passed on directly to fMRIPrep
      json_edits:
        datatype: field/text
        help: >-
          JQ filters (https://devdocs.io/jq/) to apply to JSON side-cars in order to
          handle special cases where the dcm2niix fails to produce valid a BIDS
    configuration:
      name: fmriprep
      executable: /opt/conda/bin/fmriprep
      dataset: /work/bids-dataset
      app_output_dir: /work/bids-app-output
      app_work_dir: /work/nipype-work
      json_edits:
        path: "fmap/.*"
        jq_expr: '.IntendedFor = "{bold}"'
